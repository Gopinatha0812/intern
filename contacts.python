import tkinter as tk
from tkinter import messagebox

class SimpleContactBook:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("700x500")
        self.contacts = []
        self.create_widgets()
        
    def create_widgets(self):
        entry_frame = tk.Frame(self.root, padx=10, pady=10)
        entry_frame.pack()
        fields = ["Name", "Phone", "Email", "Address"]
        self.entries = {}
        
        for i, field in enumerate(fields):
            tk.Label(entry_frame, text=f"{field}:").grid(row=i, column=0, sticky="e", padx=5, pady=2)
            entry = tk.Entry(entry_frame, width=40)
            entry.grid(row=i, column=1, padx=5, pady=2)
            self.entries[field.lower()] = entry
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=5)
        
        buttons = [
            ("Add", self.add_contact),
            ("Search", self.search_contact),
            ("Update", self.update_contact),
            ("Delete", self.delete_contact),
            ("View All", self.view_contacts),
            ("Clear", self.clear_entries)
        ]
        
        for i, (text, command) in enumerate(buttons):
            tk.Button(button_frame, text=text, command=command).grid(row=0, column=i, padx=2)
        list_frame = tk.Frame(self.root)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.contacts_list = tk.Listbox(list_frame, width=90, height=20, 
                                      yscrollcommand=scrollbar.set)
        self.contacts_list.pack(fill=tk.BOTH, expand=True)
        
        scrollbar.config(command=self.contacts_list.yview)
        self.contacts_list.bind("<Double-1>", self.load_contact)
    
    def clear_entries(self):
        for entry in self.entries.values():
            entry.delete(0, tk.END)
    
    def get_contact_data(self):
        return {field: self.entries[field].get().strip() for field in self.entries}
    
    def add_contact(self):
        data = self.get_contact_data()
        if not data["name"]:
            messagebox.showerror("Error", "Name is required!")
            return
            
        self.contacts.append(data)
        self.clear_entries()
        self.view_contacts()
        messagebox.showinfo("Success", "Contact added successfully!")
    
    def view_contacts(self):
        self.contacts_list.delete(0, tk.END)
        for contact in sorted(self.contacts, key=lambda x: x["name"].lower()):
            self.contacts_list.insert(tk.END, 
                                   f"Name: {contact['name']} | Phone: {contact['phone']} | "
                                   f"Email: {contact['email']} | Address: {contact['address']}")
    
    def search_contact(self):
        search_term = self.entries["name"].get().strip().lower()
        if not search_term:
            messagebox.showwarning("Warning", "Please enter a search term (name or phone)")
            return
            
        self.contacts_list.delete(0, tk.END)
        found = False
        
        for contact in self.contacts:
            if (search_term in contact["name"].lower() or 
                search_term in contact["phone"]):
                self.contacts_list.insert(tk.END, 
                                       f"Name: {contact['name']} | Phone: {contact['phone']} | "
                                       f"Email: {contact['email']} | Address: {contact['address']}")
                found = True
                
        if not found:
            messagebox.showinfo("Not Found", "No matching contacts found")
    
    def load_contact(self, event):
        selected = self.contacts_list.curselection()
        if not selected:
            return
            
        contact_str = self.contacts_list.get(selected[0])
        name_start = contact_str.find("Name: ") + 6
        name_end = contact_str.find(" | Phone:")
        name = contact_str[name_start:name_end]
        
        for contact in self.contacts:
            if contact["name"] == name:
                self.clear_entries()
                self.entries["name"].insert(0, contact["name"])
                self.entries["phone"].insert(0, contact["phone"])
                self.entries["email"].insert(0, contact["email"])
                self.entries["address"].insert(0, contact["address"])
                break
    
    def update_contact(self):
        data = self.get_contact_data()
        if not data["name"]:
            messagebox.showerror("Error", "Name is required!")
            return
            
        for i, contact in enumerate(self.contacts):
            if contact["name"].lower() == data["name"].lower():
                self.contacts[i] = data
                self.clear_entries()
                self.view_contacts()
                messagebox.showinfo("Success", "Contact updated successfully!")
                return
                
        messagebox.showerror("Error", "Contact not found!")
    
    def delete_contact(self):
        name = self.entries["name"].get().strip()
        if not name:
            messagebox.showerror("Error", "Please enter a name to delete")
            return
            
        for i, contact in enumerate(self.contacts):
            if contact["name"].lower() == name.lower():
                if messagebox.askyesno("Confirm", f"Delete {contact['name']}?"):
                    del self.contacts[i]
                    self.clear_entries()
                    self.view_contacts()
                    messagebox.showinfo("Success", "Contact deleted successfully!")
                return
                
        messagebox.showerror("Error", "Contact not found!")
root = tk.Tk()
app = SimpleContactBook(root)
root.mainloop()
